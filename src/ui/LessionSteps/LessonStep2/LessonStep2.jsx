import { useState, useEffect, memo } from "react";

// üîπ –î–æ—á–µ—Ä–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
const Child = ({ value }) => {
  console.log("üîÑ Child –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–ª—Å—è");
  return <div style={{ padding: "6px" }}>Child value: {value}</div>;
};

// üîπ –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫
const MemoChild = memo(Child);

export const LessonStep2 = () => {
  const [count, setCount] = useState(0);
  const [effectLog, setEffectLog] = useState([]);
  const [time, setTime] = useState(Date.now());
  const [intervalId, setIntervalId] = useState(null);
  const [showAnswer, setShowAnswer] = useState(false);

  // —ç—Ñ—Ñ–µ–∫—Ç –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  useEffect(() => {
    setEffectLog((logs) => [
      ...logs,
      "üîπ useEffect [] ‚Üí –≤—ã–∑–≤–∞–ª—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ mount",
    ]);
  }, []);

  // —ç—Ñ—Ñ–µ–∫—Ç —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é
  useEffect(() => {
    setEffectLog((logs) => [...logs, `üîπ useEffect [count] ‚Üí count=${count}`]);
  }, [count]);

  // –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
  const startTimer = () => {
    if (!intervalId) {
      const id = window.setInterval(() => {
        setTime(Date.now());
      }, 1000);
      setIntervalId(id);
    }
  };

  const stopTimer = () => {
    if (intervalId) {
      clearInterval(intervalId);
      setIntervalId(null);
    }
  };

  const codeStyle = {
    background: "#f5f5f5",
    padding: "12px",
    borderRadius: "6px",
    overflowX: "auto",
    fontSize: "14px",
    lineHeight: "1.4",
    margin: "8px 0",
  };

  return (
    <div>
      <h2>2. –ú–∏–Ω–∏-–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤: —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥</h2>
      {/* –ü—Ä–∏–º–µ—Ä 1 */}
      <h3>–ü—Ä–∏–º–µ—Ä 1. –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç setState</h3>
      <p>
        <code>setState</code> –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É. React –º–æ–∂–µ—Ç
        –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–±–∞—Ç—á–∏–Ω–≥). –ü–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ –≤—ã–∑–≤–∞—Ç—å
        –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ <code>count + 1</code> –¥–∞—Å—Ç
        –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
      </p>
      <p>
        <b>Count:</b> {count}
      </p>
      <button
        onClick={() => {
          setCount(count + 1);
          setCount(count + 1);
          setCount(count + 1);
        }}
      >
        –£–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 3 (—á–µ—Ä–µ–∑ count)
      </button>{" "}
      <button
        onClick={() => {
          setCount((prev) => prev + 1);
          setCount((prev) => prev + 1);
          setCount((prev) => prev + 1);
        }}
      >
        –£–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 3 (—á–µ—Ä–µ–∑ prev)
      </button>
      <pre style={codeStyle}>{`
// –ü–ª–æ—Ö–æ: –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ –±–µ—Ä—ë—Ç "—É—Å—Ç–∞—Ä–µ–≤—à–µ–µ" –∑–Ω–∞—á–µ–Ω–∏–µ count
setCount(count + 1);
setCount(count + 1);
setCount(count + 1); // —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Üí +1, –∞ –Ω–µ +3

// –•–æ—Ä–æ—à–æ: –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ –ø–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
setCount(prev => prev + 1);
setCount(prev => prev + 1);
setCount(prev => prev + 1); // —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Üí +3
      `}</pre>
      <hr />
      {/* –ü—Ä–∏–º–µ—Ä 2 */}
      <h3>–ü—Ä–∏–º–µ—Ä 2. useEffect</h3>
      <p>
        –≠—Ñ—Ñ–µ–∫—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è <b>–ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞</b>. –ï—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ <code>[]</code> ‚Äî
        —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ mount. –ï—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å <code>[count]</code> ‚Äî
        –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ count.
      </p>
      <pre style={codeStyle}>{`
useEffect(() => {
  console.log("–í—ã–∑–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ mount");
}, []);

useEffect(() => {
  console.log("–°—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ count");
}, [count]);
      `}</pre>
      <div
        style={{ background: "#eef4ff", padding: "10px", borderRadius: "6px" }}
      >
        {effectLog.map((log, i) => (
          <div key={i}>{log}</div>
        ))}
      </div>
      <hr />
      {/* –ü—Ä–∏–º–µ—Ä 3 */}
      <h3>–ü—Ä–∏–º–µ—Ä 3. –í–Ω–µ—à–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ (setInterval)</h3>
      <p>
        –ó–¥–µ—Å—å –º—ã –º–æ–∂–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞{" "}
        <code>setInterval</code>. –ö–∞–∂–¥—ã–π —Ç–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç <code>setState</code> ‚Üí
        –Ω–æ–≤—ã–π —Ä–µ—Ä–µ–Ω–¥–µ—Ä.
      </p>
      <p>
        <b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b> {new Date(time).toLocaleTimeString()}
      </p>
      <button onClick={startTimer} disabled={!!intervalId}>
        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä
      </button>{" "}
      <button onClick={stopTimer} disabled={!intervalId}>
        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
      </button>
      <pre style={codeStyle}>{`
useEffect(() => {
  const interval = setInterval(() => {
    setTime(Date.now()); // –∫–∞–∂–¥—ã–π —Ç–∏–∫ ‚Üí —Ä–µ—Ä–µ–Ω–¥–µ—Ä
  }, 1000);
  return () => clearInterval(interval);
}, []);
      `}</pre>
      <p
        style={{ background: "#fff8e1", padding: "10px", borderRadius: "6px" }}
      >
        ‚ö° –¢–∞–∫–æ–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—à—É—Ç—Å—è –Ω–∞ –æ–¥–∏–Ω
        –∏ —Ç–æ—Ç –∂–µ –∏—Å—Ç–æ—á–Ω–∏–∫, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—à–Ω–∏–µ —Ä–µ—Ä–µ–Ω–¥–µ—Ä—ã –∏–ª–∏ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.
        –ö —Ä–µ—à–µ–Ω–∏—é —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã –º—ã –≤–µ—Ä–Ω—ë–º—Å—è –ø–æ–∑–∂–µ.
      </p>
      <hr />
      {/* –ü—Ä–∏–º–µ—Ä 4 */}
      <h3>–ü—Ä–∏–º–µ—Ä 4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤</h3>
      <p>
        –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å: –∫–æ–≥–¥–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è <b>—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π count</b>,
        –æ–±—ã—á–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ—Ç—Å—è. –ù–æ –µ—Å–ª–∏ –æ–±–µ—Ä–Ω—É—Ç—å –µ–≥–æ –≤{" "}
        <code>React.memo</code>, —Ç–æ –æ–Ω —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–≤–æ–∏—Ö
        –ø—Ä–æ–ø—Å–æ–≤.
      </p>
      <button onClick={() => setCount((prev) => prev + 1)}>+1 –∫ count</button>
      <div style={{ display: "flex", gap: "20px", marginTop: "10px" }}>
        <div>
          <p>–û–±—ã—á–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫:</p>
          <Child value={0} />
        </div>
        <div>
          <p>–ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫:</p>
          <MemoChild value={0} />
        </div>
      </div>
      <pre style={codeStyle}>{`
// –û–±—ã—á–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫
const Child = ({ value }) => {
  console.log("Child –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–ª—Å—è");
  return <div>{value}</div>;
};

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
const MemoChild = React.memo(Child);
      `}</pre>
      <hr />
      {/* –í–æ–ø—Ä–æ—Å */}
      <h3>–í–æ–ø—Ä–æ—Å –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏</h3>
      <p>–ü–æ–¥—É–º–∞–π—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ?</p>
      <pre style={codeStyle}>{`
const Example = () => {
  const [value, setValue] = useState(0);

  useEffect(() => {
    setValue(value + 1);
  }, []);

  return <div>{value}</div>;
};
      `}</pre>
      <button
        onClick={() => setShowAnswer(!showAnswer)}
        style={{
          marginTop: "6px",
          background: "royalblue",
          color: "white",
          border: "none",
          borderRadius: "4px",
          padding: "6px 10px",
          cursor: "pointer",
        }}
      >
        {showAnswer ? "–°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç" : "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç"}
      </button>
      {showAnswer && (
        <div
          style={{
            marginTop: "8px",
            padding: "10px",
            background: "#eef4ff",
            border: "1px solid #c7d8ff",
            borderRadius: "6px",
          }}
        >
          –¢–∞–∫–æ–π –∫–æ–¥ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ <b>–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º—É —Ü–∏–∫–ª—É</b>. –≠—Ñ—Ñ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –æ–¥–∏–Ω
          —Ä–∞–∑ –ø–æ—Å–ª–µ mount, –≤–Ω—É—Ç—Ä–∏ –≤—ã–∑–æ–≤–µ—Ç—Å—è <code>setState</code> ‚Üí —ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç
          –Ω–æ–≤—ã–π —Ä–µ–Ω–¥–µ—Ä ‚Üí —Å–Ω–æ–≤–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç. React –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–ª—è—Ç—å
          –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ.
        </div>
      )}
    </div>
  );
};
